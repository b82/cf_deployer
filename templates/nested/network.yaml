---
AWSTemplateFormatVersion: "2010-09-09"
Description: |
  VPC template


################################################################################
#                                  Metadata                                    #
################################################################################
Metadata:

  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label: {default: 'Required parameters'}
        Parameters:
          - ProjectName
          - Environment
          - VPCCIDR


################################################################################
#                               Parameters                                     #
################################################################################
Parameters:

  ProjectName:
    Type: String
    Description: "The project name"

  Environment:
    Type: String
    Description: "Environment Name"

  VPCCIDR:
    Type: String
    Description: "VPC CIDR Format (/16)"
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([1][6-9]|2[0-4]))$"


################################################################################
#                               Resources                                      #
################################################################################
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
        - Key: "Name"
          Value: !Join ["-", [ !Ref ProjectName, !Ref Environment, "vpc" ]]

# Public Subnets
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "0"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Select [ 0, !Cidr [ !Ref VPCCIDR, 16, 4 ]]
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Name"
          Value: !Join ["-", [ !Ref ProjectName, !Ref Environment, "public", "a" ]]
      VpcId: !Ref VPC

  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "1"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Select [ 1, !Cidr [ !Ref VPCCIDR, 16, 4 ]]
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Name"
          Value: !Join ["-", [ !Ref ProjectName, !Ref Environment, "public", "b"]]
      VpcId: !Ref VPC

  SubnetPublicC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "2"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Select [ 2, !Cidr [ !Ref VPCCIDR, 16, 4 ]]
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Name"
          Value: !Join ["-", [ !Ref ProjectName, !Ref Environment, "public", "c"]]
      VpcId: !Ref VPC

# Private subnets
  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "0"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Select [ 4, !Cidr [ !Ref VPCCIDR, 16, 4 ]]
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: !Join ["-", [ !Ref ProjectName, !Ref Environment, "private", "a" ]]
      VpcId: !Ref VPC

  SubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "1"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Select [ 5, !Cidr [ !Ref VPCCIDR, 16, 4 ]]
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: !Join ["-", [ !Ref ProjectName, !Ref Environment, "private", "b"]]
      VpcId: !Ref VPC

  SubnetPrivateC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "2"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Select [ 6, !Cidr [ !Ref VPCCIDR, 16, 4 ]]
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: !Join ["-", [ !Ref ProjectName, !Ref Environment, "private", "c"]]
      VpcId: !Ref VPC

# Natted subnets
  SubnetPrivateNatA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "0"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Select [ 8, !Cidr [ !Ref VPCCIDR, 16, 4 ]]
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: !Join ["-", [ !Ref ProjectName, !Ref Environment, "natted", "a" ]]
      VpcId: !Ref VPC

  SubnetPrivateNatB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "1"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Select [ 9, !Cidr [ !Ref VPCCIDR, 16, 4 ]]
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: !Join ["-", [ !Ref ProjectName, !Ref Environment, "natted", "b"]]
      VpcId: !Ref VPC

  SubnetPrivateNatC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "2"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Select [ 10, !Cidr [ !Ref VPCCIDR, 16, 4 ]]
      MapPublicIpOnLaunch: False
      Tags:
        - Key: "Name"
          Value: !Join ["-", [ !Ref ProjectName, !Ref Environment, "natted", "c1"]]
      VpcId: !Ref VPC

# Create Gateway
  PublicInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
        - Key: "Name"
          Value: "publicIGW"

# Attach IGW to VPC
  IGWAttachmentoVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref PublicInternetGateway
      VpcId: !Ref VPC

# Create public route table
  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: "Name"
          Value: "public-route-table"

# Create private route table
  PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: "Name"
          Value: "private-route-table"

# Create natted route table A
  NattedRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "natted-route-table-a"

# Create natted route table B
  NattedRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "natted-route-table-b"

# Create natted route table C
  NattedRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "natted-route-table-c"

# Set public routes
  PublicRoutes:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref PublicInternetGateway
      RouteTableId: !Ref PublicRouteTable

# Associate public route table to public subnet
  PublicSubnetAToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicA
      # SubnetId: !GetAtt NetworkStack.Outputs.PublicSubnetAOutput

  PublicSubnetBToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicB
      # SubnetId: !GetAtt NetworkStack.Outputs.PublicSubnetBOutput

  PublicSubnetCToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicC
      # SubnetId: !GetAtt NetworkStack.Outputs.PublicSubnetCOutput

# Associate Private route table to Private subnet
  PrivateSubnetAToPrivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateA
      # SubnetId: !GetAtt NetworkStack.Outputs.PrivateSubnetAOutput

  PrivateSubnetBToPrivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateB
      # SubnetId: !GetAtt NetworkStack.Outputs.PrivateSubnetBOutput

  PrivateSubnetCToPrivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateC
      # SubnetId: !GetAtt NetworkStack.Outputs.PrivateSubnetCOutput

# Associate Natted route table to Natted subnet
  NattedSubnetAToNattedRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NattedRouteTableA
      SubnetId: !Ref SubnetPrivateNatA
      # SubnetId: !GetAtt NetworkStack.Outputs.NattedSubnetAOutput

  NattedSubnetBToNattedRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NattedRouteTableB
      SubnetId: !Ref SubnetPrivateNatB
      # SubnetId: !GetAtt NetworkStack.Outputs.NattedSubnetBOutput

  NattedSubnetCToNattedRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NattedRouteTableC
      SubnetId: !Ref SubnetPrivateNatC
      # SubnetId: !GetAtt NetworkStack.Outputs.NattedSubnetCOutput


################################################################################
#                                   Outputs                                    #
################################################################################
Outputs:

  AccountId:
    Description: 'Account ID number'
    Value: !Ref 'AWS::AccountId'

  Region:
    Description: 'Region'
    Value: !Ref 'AWS::Region'

  Environment:
    Description: 'Environment'
    Value: !Ref Environment

  VPCName:
    Description: 'VPC name'
    Value: !Join ['-', [!Ref ProjectName, !Join ['', !Split ['-', !Ref 'AWS::Region']], 'vpc']]

  VPCId:
    Description: 'VPC id'
    Value: !Ref VPC
    # Export:
      # Name: !Join [':', [!Ref ProjectName, !Ref Environment, !Ref VPC, !Ref VPCId]]
      # Name: !Ref VPC

  VPCCIDR:
    Description: 'VPC CIDR'
    Value: !GetAtt VPC.CidrBlock

  SubnetPublicAId:
    Description: 'Id of the subnet public A'
    Value: !Ref SubnetPublicA
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, SubnetPublicAId]]

  SubnetPublicBId:
    Description: 'Id of the subnet public B'
    Value: !Ref SubnetPublicB
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, SubnetPublicBId]]

  SubnetPublicCId:
    Description: 'Id of the subnet public C'
    Value: !Ref SubnetPublicC
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, SubnetPublicCId]]

  SubnetPrivateNatAId:
    Description: 'Id of the subnet private nat A'
    Value: !Ref SubnetPrivateNatA
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, SubnetPrivateNatAId]]

  SubnetPrivateNatBId:
    Description: 'Id of the subnet private nat B'
    Value: !Ref SubnetPrivateNatB
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, SubnetPrivateNatBId]]

  SubnetPrivateNatCId:
    Description: 'Id of the subnet private nat C'
    Value: !Ref SubnetPrivateNatC
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, SubnetPrivateNatCId]]

  SubnetPrivateAId:
    Description: 'Id of the subnet private A'
    Value: !Ref SubnetPrivateA
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, SubnetPrivateAId]]

  SubnetPrivateBId:
    Description: 'Id of the subnet private B'
    Value: !Ref SubnetPrivateB
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, SubnetPrivateBId]]

  SubnetPrivateCId:
    Description: 'Id of the subnet private C'
    Value: !Ref SubnetPrivateC
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, SubnetPrivateCId]]

  RouteTablePublicAId:
    Description: 'Id of Route Table Public A'
    Value: !Ref PublicRouteTable
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, RouteTablePublicAId]]

  RouteTablePrivateNatAId:
    Description: 'Id of Route Table Private NAT A'
    Value: !Ref NattedRouteTableA
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, RouteTablePrivateNatAId]]

  RouteTablePrivateNatBId:
    Description: 'Id of Route Table Private NAT B'
    Value: !Ref NattedRouteTableB
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, RouteTablePrivateNatBId]]
    # Condition: CreateMultiAZNAT

  RouteTablePrivateNatCId:
    Description: 'Id of Route Table Private NAT C'
    Value: !Ref NattedRouteTableC
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, RouteTablePrivateNatCId]]
    # Condition: CreateMultiAZNAT

  RouteTablePrivateAId:
    Description: 'Id of Route Table Private A'
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Join [':', [!Ref ProjectName, !Ref Environment, RouteTablePrivateAId]]