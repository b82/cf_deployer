---
AWSTemplateFormatVersion: "2010-09-09"
Description: |
  VPC template


################################################################################
#                                  Metadata                                    #
################################################################################
Metadata:

  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label: {default: 'Required parameters'}
        Parameters:
          - VPCId
          - VPCCIDR
          - ProjectName
          - SubnetPublicAId
          - SubnetPublicBId
          - SubnetPrivateAId
          - SubnetPrivateBId
          - SubnetPrivateCId
          - SubnetPrivateNatAId
          - SubnetPrivateNatBId
          - KeyPairName
          - BucketName
          - RDSMySQLEndpoints
          - EC2WordpressSecurityGroupId


################################################################################
#                               Parameters                                     #
################################################################################
Parameters:

  VPCId:
    Type: String
    Description: "VPC ID"

  SubnetPublicAId:
    Type: String
    Description: "Subnet public A id"

  SubnetPublicBId:
    Type: String
    Description: "Subnet public B id"

  SubnetPrivateAId:
    Type: String
    Description: "Subnet private A id"

  SubnetPrivateBId:
    Type: String
    Description: "Subnet private B id"

  SubnetPrivateCId:
    Type: String
    Description: "Subnet private C id"

  SubnetPrivateNatAId:
    Type: String
    Description: "Subnet Private NAT A"

  SubnetPrivateNatBId:
    Type: String
    Description: "Subnet Private NAT B"

  VPCCIDR:
      Type: String
      NoEcho: True
      Description: "VPC CIDR"

  KeyPairName:
      Type: String
      Description: "Key pair name"
  
  InstanceProfile:
      Type: String
      Description: "Instance profile name"

  ProjectName:
    Type: String
    #Default: "deployer-demo"
    Description: "The project name"

  BucketName:
    Type: String
    #Default: "luca-formazione"
    Description: "Bucket Name"

  RDSMySQLEndpoint:
    Type: String
    Description: "RDSMySQL endpoint address"

  EC2WordpressSecurityGroupId:
    Type: String
    Description: "EC2 Wordpress Security Group Id"

################################################################################
#                               Mappings                                       #
################################################################################
Mappings:
  ImageId:
    eu-west-1:
      AmazonLinux2: "ami-01f14919ba412de34"
      Ubuntu: "ami-02df9ea15c1778c9c"
      WindowsServer: "ami-0ee20e39ab4409d25"
    us-east-1:
      AmazonLinux2: "ami-00dc79254d0461090"
      Ubuntu: "ami-04b9e92b5572fa0d1"
      WindowsServer: "ami-00da65e71856d58bb"


################################################################################
#                               Resources                                      #
################################################################################
Resources:

  # DNS - HostedZone
  DNSHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: "deployer.int"
      VPCs:
        - VPCId: !Ref VPCId
          VPCRegion: !Ref "AWS::Region"

  # DNS - record
  EC2WordpressDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNSHostedZone
      Comment: "DNS name for MySQL RDS."
      Name: "demo.deployer.int"
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !Ref RDSMySQLEndpoint

  # EC2 Amazon Linux 2 (CentOS) - Wordpress
  EC2Wordpress:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.small
      ImageId: !FindInMap [ImageId, !Ref "AWS::Region", AmazonLinux2]
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref EC2WordpressSecurityGroupId
      SubnetId: !Ref SubnetPublicAId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          cd /home/ec2-user
          curl -O https://bootstrap.pypa.io/get-pip.py
          yum install -y python3-pip python-pip python3 python3-setuptools
          export PATH=~/.local/bin:$PATH
          pip3 install awscli --upgrade
          pip3 install pymysql
          pip install pymysql
          pip3 install jinja2
          amazon-linux-extras install epel
          amazon-linux-extras install ansible2
          amazon-linux-extras install php7.3
          yum update
          aws s3 cp --recursive s3://${BucketName}/${ProjectName}/ansible ./ansible
          cd ansible
          ansible-playbook -i hosts amazon_ec2_wordpress.yml -e 'ansible_python_interpreter=/usr/bin/python' -c local --extra-vars "rdsMySQLendpoint=${RDSMySQLEndpoint}"
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: Amazon-Linux-2-Wordpress
        - Key: Env
          Value: deployer-smartbackup-demo

  # EC2 Ubuntu 18.04 - MongoDB & deployer Agent
  EC2Ubuntu:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.small
      ImageId: !FindInMap [ImageId, !Ref "AWS::Region", Ubuntu]
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt EC2UbuntuSecurityGroup.GroupId
      SubnetId: !Ref SubnetPublicAId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          cd /home/ubuntu
          apt update
          curl -O https://bootstrap.pypa.io/get-pip.py
          apt install -y python3-distutils
          apt install python3-pip -y
          python3 get-pip.py
          export PATH=~/.local/bin:$PATH
          pip3 install awscli --upgrade
          pip3 install pymongo
          pip3 install jinja2
          apt update
          DEBIAN_FRONTEND=noninteractive apt upgrade -y
          apt install software-properties-common
          apt-add-repository --yes --update ppa:ansible/ansible
          apt install ansible -y
          aws s3 cp --recursive s3://${BucketName}/${ProjectName}/ansible ./ansible
          cd ansible
          ansible-playbook -i hosts ubuntu18_mongodb.yml -e 'ansible_python_interpreter=/usr/bin/python3' -c local
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sdb
          Ebs:
            VolumeSize: 8
        - DeviceName: /dev/sdc
          Ebs:
            VolumeSize: 8
      Tags:
        - Key: Name
          Value: Ubuntu18.04-MongoDB-and-deployer-agent
        - Key: Env
          Value: deployer-SmartBackup-Demo

  # EC2 Amazon Linux 2 (CentOS) - MySQL internal - deployer Agentless
  EC2AmazonLinux2:
   Type: AWS::EC2::Instance
   Properties:
     InstanceType: t3a.small
     ImageId: !FindInMap [ImageId, !Ref "AWS::Region", AmazonLinux2]
     KeyName: !Ref KeyPairName
     SecurityGroupIds:
       - !GetAtt EC2AmazonLinux2SecurityGroup.GroupId
     SubnetId: !Ref SubnetPublicAId
     UserData:
       Fn::Base64: !Sub |
         #!/bin/bash
         cd /home/ec2-user
         curl -O https://bootstrap.pypa.io/get-pip.py
         yum install -y python3-pip python-pip python3 python3-setuptools
         export PATH=~/.local/bin:$PATH
         pip3 install awscli --upgrade
         pip3 install pymysql
         pip install pymysql
         pip3 install jinja2
         amazon-linux-extras install epel
         amazon-linux-extras install ansible2
         yum update
         aws s3 cp --recursive s3://${BucketName}/${ProjectName}/ansible ./ansible
         cd ansible
         ansible-playbook -i hosts amazon_ec2_mysql.yml -e 'ansible_python_interpreter=/usr/bin/python' -c local
     IamInstanceProfile: !Ref InstanceProfile
     Tags:
       - Key: Name
         Value: Amazon-Linux-2-MySQL-and-deployer-agentless
       - Key: Env
         Value: deployer-SmartBackup-Demo

  # Windows Server 2019 with SQL Server 2017 Standard (using an ubuntu small type for windows-server high billing)
  EC2WindowsServer2019:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.xlarge
      ImageId: !FindInMap [ImageId, !Ref "AWS::Region", WindowsServer]
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt EC2WindowsServer2019SecurityGroup.GroupId
      SubnetId: !Ref SubnetPublicAId
      UserData:
        Fn::Base64: !Sub |
          <powershell>
            Copy-S3Object -BucketName ${BucketName} -Key ${ProjectName}/ansible/roles/windows-sqlserver-import-dump/files/EmployeeCaseStudySampleDB2012.bak -LocalFile "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\Backup\EmployeeCaseStudySampleDB2012.bak"
            Invoke-Sqlcmd -Query "CREATE DATABASE EmployeeCaseStudyData" -ServerInstance .
            Invoke-Sqlcmd -Query "RESTORE DATABASE EmployeeCaseStudyData FROM DISK = 'C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\Backup\EmployeeCaseStudySampleDB2012.bak' WITH REPLACE, MOVE 'EmployeeCaseStudyData' TO 'C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\EmployeeCaseStudyData.mdf', MOVE 'EmployeeCaseStudyLog' TO 'C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\Log\EmployeeCaseStudyData_log.ldf';" -ServerInstance .
            Invoke-Sqlcmd -Query "SELECT name FROM master.sys.databases" -ServerInstance .
          </powershell>
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: Windows-Server-2019-SQL-Server-2017-Standard-and-deployer-agent
        - Key: Env
          Value: deployer-SmartBackup-Demo

  # Ubuntu security group
  EC2UbuntuSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "MongoDB security group"
      GroupName: "mongodb"
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27019
          CidrIp: 185.90.68.114/32
          Description: "Allow traffic to MongoDB port"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 185.90.68.114/32
          Description: "Enable SSH"
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 185.90.68.114/32
          Description: "Enable ping"

  # Amazon Linux 2 security group
  EC2AmazonLinux2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "MySQL security group"
      GroupName: "mysql-ec2"
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 185.90.68.114/32
          Description: "Allow MySQL traffic"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 185.90.68.114/32
          Description: "Enable SSH"
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 185.90.68.114/32
          Description: "Enable ping"

  # Windows Server 2019 security group
  EC2WindowsServer2019SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Windows Server 2019 security group"
      GroupName: "Windows Server 2019"
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 185.90.68.114/32
          Description: "Enable RDP"
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 185.90.68.114/32
          Description: "Enable ping"


################################################################################
#                                   Outputs                                    #
################################################################################
Outputs: {}
